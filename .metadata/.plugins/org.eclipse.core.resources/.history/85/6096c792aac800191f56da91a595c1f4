package pages;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;

import config.OR;
import test.Driver_Class;

public class SAD {
	WebDriver driver;

	@FindBy(xpath = "//*[@id='signin-link']/strong")
	static WebElement liLogin;
	@FindBy(xpath = "//*[@id='sUserId']")
	static WebElement txtLoginId;
	@FindBy(xpath = "//*[@id='sUserPassword']")
	static WebElement txtPassword;
	@FindBy(xpath = "//*[@id='signin-dropdown']/form/table/tbody/tr[6]/td/input")
	static WebElement btnLoginInUcustoms;
	@FindBy(xpath = "//*[@id='header']/table/tbody/tr[1]/td/table/tbody/tr/td/div/div/table/tbody/tr[1]/td[2]/div[1]/ul/li[5]/a")
	static WebElement liSignOut;
	// ---------------------------------------Menu-------
	@FindBy(xpath = "//*[@id='mb_ShipCargo']/a")
	static WebElement menuShipCargo;
	@FindBy(linkText = "Ship Clearance")
	static WebElement subMenuShipClearance;
	@FindBy(linkText = "Ship Arrival Declarations")
	static WebElement nestedSubMenuShipArrivalDeclarations;
	@FindBy(xpath = "//*[@id='btnNew']")
	static WebElement btnNew;
	@FindBy(xpath = "//*[@id='List_ShipArrivalDeclLs_0_ID0EAABAAA']/a/i")
	static WebElement lnkOpenSAD;
	@FindBy(xpath = "//*[@id='chkallID0EAAAABA']")
	static WebElement chkSAD_lst;
	@FindBy(xpath = "//*[@id='btnDelete']")
	static WebElement btnDelete;
	@FindBy(xpath = "//*[@id='btnShpID']")
	static WebElement btnShpID;
	@FindBy(xpath = "//*[@id='frame_ShipDeclJourPopLsPg']")
	static WebElement frame_ShipDeclJourPopLsPg;
	// -------------------------Search ------------------
	@FindBy(xpath = "//*[@id='txtJrnNo']")
	static WebElement txtJrnNo;
	@FindBy(xpath = "//*[@id='txtNameOfShip']")
	static WebElement txtNameOfShip;
	@FindBy(xpath = "//*[@id=\"ID0EABBA\"]/td/table/tbody/tr/td/table/tbody/tr[12]/td/div/input[1]")
	static WebElement btnSearch;
	@FindBy(xpath = "//*[@id='List_ShipDeclJourPopLs_0_VesselNumber']/a")
	static WebElement lnkShipID;
	// -------------------------------------------------------
	@FindBy(xpath = "//*[@id='txtNMaster']")
	static WebElement txtNameofMaster;
	@FindBy(xpath = "//*[@id='txtTypeOfVoy']")
	static WebElement ddlTypeOfVoy;
	@FindBy(xpath = "//*[@id='DDLPSPort']")
	static WebElement ddlPositionOfShipInThePort;
	@FindBy(xpath = "//*[@id='txtNPOC']")
	static WebElement txtNPOC;
	@FindBy(xpath = "//*[@id='txtBurthem']")
	static WebElement txtBurthen;
	@FindBy(xpath = "//*[@id='txtMeanDraft']")
	static WebElement txtMeanDraft;
	@FindBy(xpath = "//*[@id='DDlPurCall']")
	static WebElement ddlPurCall;
	@FindBy(xpath = "//*[@id='txtOthrPurCall']")
	static WebElement txtOthrPurCall;
	@FindBy(xpath = "//*[@id='txtBrfDesc']")
	static WebElement txtBrfDesc;
	@FindBy(xpath = "//*[@id='txtBrfDescVoy']")
	static WebElement txtBrfDescVoy;
	@FindBy(xpath = "//*[@id='txtShpDesc']")
	static WebElement txtShpDesc;
	@FindBy(xpath = "//*[@id='txtRemarks']")
	static WebElement txtRemarks;
	@FindBy(xpath = "//*[@id='ChkAcknoeledge']")
	static WebElement ChkAcknoeledge;
	// --------------Link Repository-------------
	@FindBy(xpath = "//*[@id=\"ShipArrivalDeclFr_Links_icon\"]/i")
	static WebElement linkRepository;
	@FindBy(linkText = "Cargo General Declaration (FAL 2)")
	static WebElement lnkFAL2;
	@FindBy(linkText = "Ship Stores Declaration (FAL3)")
	static WebElement lnkFAL3;
	@FindBy(linkText = "Crew's Effects Declaration (FAL 4)")
	static WebElement lnkFAL4;
	@FindBy(linkText = "Crew List (FAL 5)")
	static WebElement lnkFAL5;
	@FindBy(linkText = "Passenger List (FAL 6)")
	static WebElement lnkFAL6;
	@FindBy(linkText = "Dangerous Goods Declaration (FAL7)")
	static WebElement lnkFAL7;
	@FindBy(linkText = "Last 10 Ports of Calls List")
	static WebElement lnkLast10Port;
	@FindBy(linkText = "Immigration Clearance Form")
	static WebElement lnkImmigration;
	@FindBy(linkText = "Vessel Advise Form (PKP)")
	static WebElement lnkPKP;
	@FindBy(linkText = "Pre-Arrival Notification of Security (PANS) Form ")
	static WebElement lnkPANS;
	@FindBy(linkText = "Petroleum Safety Measures (Form A)")
	static WebElement lnkFormA;
	@FindBy(linkText = "View / Upload Documents")
	static WebElement lnkUploadDoc;
	@FindBy(linkText = "View Ship Details")
	static WebElement lnkViewShipDetails;
	@FindBy(linkText = "View Agent Details")
	static WebElement lnkViewAgentDetails;
	@FindBy(linkText = "View General Information")
	static WebElement lnkViewGeneralInfo;
	@FindBy(linkText = "View Error File")
	static WebElement lnkViewErrorFile;
	@FindBy(linkText = "Ship Arrival Declarations")
	static WebElement lnkShipArrivalDec;
	@FindBy(linkText = "Last 10 Ports of Calls List")
	static WebElement lnkLast10PortOfCallsList;
	@FindBy(linkText = "View Remarks History")
	static WebElement lnkRemarksHistory;
	@FindBy(linkText = "Health Details")
	static WebElement lnkHealthDetails;
	@FindBy(linkText = "Maritime Declaration of Health")
	static WebElement lnkMaritimeDeclarationofHealth;
	@FindBy(linkText = "Crew Vaccination Details")
	static WebElement lnkCrewVaccinationDetails;
	@FindBy(linkText = "JLM/ISPS/PAN/3")
	static WebElement lnkJLM_ISPS_PAN3;
	@FindBy(linkText = "JLM/ISPS/PAN/4")
	static WebElement lnkJLM_ISPS_PAN4;

	// ------------IFrame-------------
	@FindBy(id = "frame_SCCargoGeneralDeclarationFrPG")
	static WebElement frame_FAL2;
	@FindBy(id = "frame_SCSCShipStoresDeclarationFrPg")
	static WebElement frame_FAL3;
	@FindBy(id = "frame_CrewEffectsDeclarationFrPg")
	static WebElement frame_FAL4;
	@FindBy(id = "frame_CrewEffectsDetailsFrPg")
	static WebElement frame_FAL4CrewEffects;
	@FindBy(id = "frame_SCCrewInformationFrPg")
	static WebElement frame_FAL5;
	@FindBy(id = "frame_SCPassengersFrPg")
	static WebElement frame_FAL6;
	@FindBy(id = "frame_SCDGGoodsFrPg")
	static WebElement frame_FAL7;
	@FindBy(id = "frame_SCDGCargoDeclarationDetailsLsPg")
	static WebElement frame_FAL7Remain;
	@FindBy(id = "frame_SCDGGoodsBillOfLadingPopUpPg")
	static WebElement frame_FAL7DG;
	@FindBy(id = "frame_SCDGGoodsDeclarationsPopUpPg")
	static WebElement frame_FAL7Dec;
	@FindBy(id = "frame_NexportofcallFrPg")
	static WebElement frame_10PortofCall;
	@FindBy(id = "frame_SCImmigrationClearanceFrPg")
	static WebElement frame_Immigration;
	@FindBy(id = "frame_SCVesselAdvisePKPFrPg")
	static WebElement frame_PKP;
	@FindBy(id = "frame_HealthDetailsFrPg")
	static WebElement frame_HealthDetails;
	@FindBy(id = "frame_SCMHealthDeclarationFrPg")
	static WebElement frame_MHealthDeclaration;
	@FindBy(id = "frame_SCVaccinationFrPg")
	static WebElement frame_SCVaccination;
	@FindBy(id = "frame_SCUploadErrorLsPg")
	static WebElement frame_UploadErrorLog;
	@FindBy(id = "frame_ShipDetailsViewPg")
	static WebElement frame_ShipDetailsView;
	@FindBy(id = "frame_ViewConsigneeDetailPg")
	static WebElement frame_ViewAgent;
	@FindBy(id = "FTPUploadDocs")
	static WebElement frame_FTPUploadDocs;
	@FindBy(id = "frame_SCRemarksHistoryLsPg")
	static WebElement frame_RemarksHistory;
	@FindBy(id = "frame_SCPANSecurityFrPg")
	static WebElement frame_PANS;
	@FindBy(id = "frame_ISPSCodeComplainceListFrPg")
	static WebElement frame_ISPSCode;
	@FindBy(id = "frame_ScJlmIspsPanFrPg")
	static WebElement frame_JlmIspsPANS;
	@FindBy(id = "frame_SCGeneralInfoViewPg")
	static WebElement frame_GeneralInfo;
	@FindBy(id = "frame_SCPetroleumSafMeasuresFrPg")
	static WebElement frame_FormA;
	@FindBy(id = "frame_SCPetroleumBOLPopUpLsPg")
	static WebElement frame_FormA_BOL;

	// ---------------FAL2--------------------------

	@FindBy(xpath = "//*[@id=\"EnclRow_SCCargoHouseBillDetailsLs_Table\"]/table/tbody/tr[3]/td/table/tbody/tr/td/b")
	static WebElement txtNoRecords;
	@FindBy(xpath = "//*[@id=\"List_SCCargoHouseBillDetailsLs_ColHeader_\"]/a")
	static WebElement lnkBLNo;
	@FindBy(xpath = "//*[@id='List_SCHBItemsLs_ColHeader_']/a")
	static WebElement lnkItemHSCoad;
	@FindBy(xpath = "//*[@id=\"List_SCCargoHouseBillDetailsLs_0_ID1EAABBAA\"]/a/i")
	static WebElement linkOpenHBL;
	@FindBy(xpath = "//*[@id=\"List_SCHBItemsLs_0_ID2EAABAAA\"]/a/i")
	static WebElement linkOpenHBLL;
	@FindBy(xpath = "//*[@id='btnNew']")
	static WebElement btnNewRemainOnBoar;
	@FindBy(xpath = "//*[@id='txtBolNo']")
	static WebElement txtBolNo;
	@FindBy(xpath = "//*[@id='txtHScode']")
	static WebElement txtHScode;
	@FindBy(xpath = "//*[@id=\"autocompletediv\"]/li[1]/a")
	static WebElement autoCompleteDiv;
	@FindBy(xpath = "//*[@id='txtDescOfGoods']")
	static WebElement txtDescOfGoods;
	@FindBy(xpath = "//*[@id='txtContID']")
	static WebElement txtContID;
	@FindBy(xpath = "//*[@id='txtMrks']")
	static WebElement txtMrks;
	@FindBy(xpath = "//*[@id='txtPkgNo']")
	static WebElement txtPkgNo;
	@FindBy(xpath = "//*[@id='BOlQuantity']")
	static WebElement txtTypeOfPack;
	@FindBy(xpath = "//*[@id='txtGrossweight']")
	static WebElement txtGrossweight;
	@FindBy(xpath = "//*[@id='txtUOM']")
	static WebElement txtUOM;
	@FindBy(xpath = "//*[@id='txtPortofLanding']")
	static WebElement txtPortofLanding;
	@FindBy(xpath = "//*[@id='PortOfDischarge']")
	static WebElement txtPortOfDischarge;
	@FindBy(xpath = "//*[@id='chkRemainOnBoard']")
	static WebElement chkRemainOnBoard;
	@FindBy(xpath = "//*[@id='chkIsSplitHouseBill']")
	static WebElement chkIsSplitHouseBill;
	// ------------FAL3--------------

	@FindBy(xpath = "//*[@id='txtPeriodofStay']")
	static WebElement txtPeriodofStay;
	@FindBy(xpath = "//*[@id='ChkNillStores']")
	static WebElement ChkNillStores;
	@FindBy(xpath = "//*[@id='btnENew']")
	static WebElement btnENew;
	@FindBy(xpath = "//*[@id='txtNameArticle']")
	static WebElement txtNameArticle;
	@FindBy(xpath = "//*[@id='txtLocBoard']")
	static WebElement txtLocBoard;
	@FindBy(xpath = "//*[@id='txtNAOthers']")
	static WebElement txtNAOthers;
	@FindBy(xpath = "//*[@id='txtLBOthers']")
	static WebElement txtLBOthers;
	@FindBy(xpath = "//*[@id='txtQuantity']")
	static WebElement txtQuantity;
	@FindBy(xpath = "//*[@id='ddlGrossWeightUOM']")
	static WebElement ddlGrossWeightUOM;

	// ------------FAL4--------------
	@FindBy(xpath = "//*[@id='ChkNilEffects']")
	static WebElement ChkNilEffects;
	@FindBy(xpath = "//*[@id=\"btnNew\"]")
	static WebElement btnNewCrew;
	@FindBy(xpath = "//*[@attribute='FamilyName']")
	static WebElement txtFamilyName;
//	@FindBy(xpath = "//*[@id='txxothdoc']")
//	static WebElement txxothdoc;
	@FindBy(xpath = "//*[@attribute='RankorRating']")
	static WebElement txtRankorRating;
	@FindBy(xpath = "//*[@id='txtGoodsDescription']")
	static WebElement txtGoodsDescription;
	// ------------FAL5--------------
	@FindBy(xpath = "//*[@id=\"btnAdd\"]")
	static WebElement btnAdd;
	@FindBy(xpath = "//*[@id=\"txtName\"]")
	static WebElement txtFmlyName;
	@FindBy(xpath = "//*[@id=\"txtRank\"]")
	static WebElement txtRank;
	@FindBy(xpath = "//*[@id=\"txtCountry\"]")
	static WebElement txtCountry;
	@FindBy(xpath = "//*[@id=\"ddlAmendReason\"]")
	static WebElement ddlTravelDocument;
	@FindBy(xpath = "//*[@id=\"txxothdoc\"]")
	static WebElement txtothdoc;
	@FindBy(xpath = "//*[@id=\"txtDocNo\"]")
	static WebElement txtDocNo;
	@FindBy(xpath = "//*[@id='ui-datepicker-div']/div[1]/div/select[2]")
	static WebElement year_datepicker;
	@FindBy(xpath = "//*[@id='ui-datepicker-div']/div[1]/div/select[1]")
	static WebElement month_datepicker;
	@FindBy(xpath = "//*[@id='ui-datepicker-div']/table/tbody/tr[2]/td[1]/a") // 2nd Row 1 Column
	static WebElement select_date;
	@FindBy(xpath = "//*[@id=\"txtDOBDatePicker\"]")
	static WebElement txtDOBDatePicker;
	@FindBy(xpath = "//*[@id=\"txtBirthPlace\"]")
	static WebElement txtBirthPlace;
	@FindBy(xpath = "//*[@id=\"txtIssueDateDatePicker\"]")
	static WebElement txtIssueDateDatePicker;
	@FindBy(xpath = "//*[@id=\"txtExpiryDateDatePicker\"]")
	static WebElement txtExpiryDateDatePicker;
	@FindBy(xpath = "//*[@id=\"txtBookNo\"]")
	static WebElement txtBookNo;
	@FindBy(xpath = "//*[@id=\"txtCountrypt\"]")
	static WebElement txtCountrypt;
	@FindBy(xpath = "//*[@id=\"txtValidDateDatePicker\"]")
	static WebElement txtValidDateDatePicker;
	// ------------FAL6--------------
	@FindBy(xpath = "//*[@id=\"chkNilPassengers\"]")
	static WebElement chkNilPassengers;
	@FindBy(xpath = "//*[@id=\"txtFamilyName\"]")
	static WebElement txtFamilyName_passenger;
	@FindBy(xpath = "//*[@id=\"txtNationality\"]")
	static WebElement txtNationality;
	@FindBy(xpath = "//*[@id=\"txtPOB\"]")
	static WebElement txtPOB;
	@FindBy(xpath = "//*[@id=\"txtTDT\"]")
	static WebElement txtTDT;
	@FindBy(xpath = "//*[@attribute=\"DocumentNo\"]")
	static WebElement txtDocumentNo;
	@FindBy(xpath = "//*[@id=\"txtDIDDatePicker\"]")
	static WebElement txtDIDDatePicker;
	@FindBy(xpath = "//*[@id=\"txtDEDDatePicker\"]")
	static WebElement txtDEDDatePicker;
	@FindBy(xpath = "//*[@id=\"rboTransitPassNo\"]") static WebElement rboTransitPassNo;
	@FindBy(xpath = "//*[@id=\"rboTransitPassYes\"]")
	static WebElement rboTransitPassYes;
	@FindBy(xpath = "//*[@id=\"txtPOE\"]")
	static WebElement txtPOE;
	@FindBy(xpath = "//*[@id=\"txtPOD\"]")
	static WebElement txtPOD;
	
	// ------------FAL7---------------
	// ------------Last10------------
	// ------------Immigration--------
	// ------------PKP--------
	// ------------PANS--------
	// ------------FORM A--------
	// ------------Upload--------

	// ---------------Buttons---------------------------
	@FindBy(xpath = "//button[text()='Create']")
	static WebElement btnCreate;
	@FindBy(xpath = "//*[text()='Submit']")
	static WebElement btnSubmit;
	@FindBy(xpath = "//*[text()='Back']")
	static WebElement btnBack;
	@FindBy(xpath = "//*[text()='Save']")
	static WebElement btnSave;
	@FindBy(xpath = "//*[text()='Complete']")
	static WebElement btnComplete;
	@FindBy(xpath = "//*[text()='Close']")
	static WebElement btnClose;
	@FindBy(xpath = "//*[text()='Request For Cancellation']")
	static WebElement btnRequestForCancellation;
	@FindBy(xpath = "//*[text()='Amend']")
	static WebElement btnAmend;
	@FindBy(xpath = "//*[text()='Print MDH']")
	static WebElement btnPrintMDH;
	@FindBy(xpath = "//*[text()='Approve']")
	static WebElement btnApprove;
	@FindBy(xpath = "//*[text()='Print Arrival Departure Report']")
	static WebElement btnPrintArrivalDepartureReport;
	@FindBy(xpath = "//*[text()='Reject']")
	static WebElement btnReject;
	@FindBy(xpath = "//*[text()='Return for Correction']")
	static WebElement btnReturnForCorrection;
	@FindBy(xpath = "//*[text()='Print FAL1']")
	static WebElement btnPrintFAL1;
	@FindBy(xpath = "//*[text()='Quarantine Needed']")
	static WebElement btnQuarantineNeeded;
	@FindBy(xpath = "//*[text()='Request for Maritime Declaration']")
	static WebElement btnRequestForMaritimeDeclaration;

	public SAD(WebDriver driver) {

		this.driver = driver;

		PageFactory.initElements(driver, this); // This initElements method will create all WebElements

	}

	public static void navigateToURL(String testData) {

		try {
			OR.driver.get(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setLoginId(String testData) {
		try {
			liLogin.click();
			// txtLoginId.clear();
			txtLoginId.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setPassword(String testData) {
		try {
			Thread.sleep(500);
			// txtPassword.clear();
			txtPassword.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickLoginBtn(String testData) {
		try {
			btnLoginInUcustoms.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;

		}
	}

	public static void clickSignOut(String testData) {
		try {

			OR.driver.switchTo().defaultContent();
			liSignOut.click();
			// OR.driver.close();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	// ----------------------------Ship Arrival Declaration-------------------------
	public static void clickShipCargoMenu(String testData) {
		try {
			menuShipCargo.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;

		}
	}

	public static void clickShipClearanceSubMenu(String testData) {
		try {
			subMenuShipClearance.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;

		}
	}

	public static void clickShipArrivalDecNestedSubMenu(String testData) {
		try {
			nestedSubMenuShipArrivalDeclarations.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;

		}
	}

	public static void clickNewSAD(String testData) throws Exception {
		try {
			OR.driver.switchTo().defaultContent();
			OR.driver.switchTo().frame("contentframe");

			JavascriptExecutor jse = (JavascriptExecutor) OR.driver;
			jse.executeScript("window.scrollBy(0,2500)");

			btnNew.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;

		}
	}

	public static void clickOpenSAD(String testData) throws Exception {
		try {
			OR.driver.switchTo().defaultContent();
			OR.driver.switchTo().frame("contentframe");

			lnkOpenSAD.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;

		}
	}

	public static void clickDeleteSAD(String testData) throws Exception {
		try {
			OR.driver.switchTo().defaultContent();
			OR.driver.switchTo().frame("contentframe");
			chkSAD_lst.click();
			JavascriptExecutor jse = (JavascriptExecutor) OR.driver;
			jse.executeScript("window.scrollBy(0,2500)");
			btnDelete.click();
			OR.driver.switchTo().alert().accept();// To click on the 'OK' button of the alert.
			// OR.driver.switchTo().alert().dismiss();// To click on the 'Cancel' button of
			// the alert.

		} catch (Exception e) {
			e.getMessage();
		}
	}

	// ----------------------FAL 1 screen form filling----------

	public static void clickShpID(String testData) {
		try {
			btnShpID.click();
			OR.driver.switchTo().frame(frame_ShipDeclJourPopLsPg);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setNameOfShip(String testData) {
		try {
			txtNameOfShip.sendKeys(testData); // CREW BOAT8239
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setJourneyNo(String testData) {
		try {
			txtJrnNo.sendKeys(testData); // CAR-JRN-B18-12-2018-001511
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickSearch_btn(String testData) {
		try {
			btnSearch.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickShipIDno(String testData) {
		try {
			lnkShipID.click();
			OR.driver.switchTo().defaultContent();
			OR.driver.switchTo().frame("contentframe");
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setNameOfMaster(String testData) {
		try {
			JavascriptExecutor jse = (JavascriptExecutor) OR.driver;
			jse.executeScript("window.scrollBy(0,700)");
			txtNameofMaster.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void selectTyoeOfVoyage(String testData) {
		try {
			Select select = new Select(ddlTypeOfVoy);
			select.selectByVisibleText(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void selectPositionOfShipinPort(String testData) {
		try {
			Select select = new Select(ddlPositionOfShipInThePort);
			select.selectByVisibleText(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setBurthen(String testData) {
		try {
			JavascriptExecutor jse = (JavascriptExecutor) OR.driver;
			jse.executeScript("window.scrollBy(0,500)");

			txtBurthen.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setMeanDraft(String testData) {
		try {
			txtMeanDraft.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void selectPurposeOfCall(String testData) {
		try {
			Select select = new Select(ddlPurCall);
			select.selectByVisibleText(testData);
			
			if ("OTHERS".equals(testData)) {
				txtOthrPurCall.sendKeys(testData);
			}
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setBriefDesOfCargo(String testData) {
		try {
			txtBrfDesc.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setBriefParticularsOfVoyage(String testData) {
		try {
			txtBrfDescVoy.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setShipDescription(String testData) {
		try {
			txtShpDesc.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setRemarks(String testData) {
		try {
			txtRemarks.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickAcknowledge(String testData) {
		try {
			WebElement checkbox = ChkAcknoeledge;
			if (!checkbox.isSelected()) {
				checkbox.click();
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickCreate_btn(String testData) {
		try {
			btnCreate.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickSave_btn(String testData) {
		try {

			btnSave.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickBack_btn(String testData) {
		try {
			// OR.driver.switchTo().defaultContent();
			// OR.driver.switchTo().frame("contentframe");
			btnBack.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	// -----------------FAL2
	public static void clickCreate_FAL2(String testData) {
		try {
			linkRepository.click();
			lnkFAL2.click();
			OR.driver.switchTo().frame(frame_FAL2);
			btnCreate.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickOpenHBL(String testData) {
		try {

			if ("Bill of Lading No.".equals(lnkBLNo.getText())
					|| "No records available".equals(txtNoRecords.getText())) {
				linkOpenHBL.click();
				if ("Item HS Code".equals(lnkItemHSCoad.getText())) {
					JavascriptExecutor jse = (JavascriptExecutor) OR.driver;
					jse.executeScript("window.scrollBy(0,700)");
					linkOpenHBLL.click();
					jse.executeScript("window.scrollBy(0,700)");
					btnBack.click();
				} else {
					btnBack.click();
				}
				btnBack.click();
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickNewRemainOnBoardBL(String testData) {
		try {
			JavascriptExecutor jse = (JavascriptExecutor) OR.driver;
			jse.executeScript("window.scrollBy(0,1000)");
			btnNewRemainOnBoar.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setBLNo(String testData) {
		try {
			txtBolNo.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setHSCode(String testData) {
		try {
			txtHScode.sendKeys(testData);
			autoCompleteDiv.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setDescriptionGoods(String testData) {
		try {
			txtDescOfGoods.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setContainerID(String testData) {
		try {
			txtContID.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setMrksAndNo(String testData) {
		try {
			txtMrks.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setPkgQuantity(String testData) {
		try {
			txtPkgNo.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setPkgType(String testData) {
		try {
			txtTypeOfPack.sendKeys(testData);
			autoCompleteDiv.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setGrossWeight(String testData) {
		try {
			txtGrossweight.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setUOM(String testData) {
		try {
			txtUOM.sendKeys(testData);
			autoCompleteDiv.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setPortOfOrigin(String testData) {
		try {
			txtPortofLanding.sendKeys(testData);
			autoCompleteDiv.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setPortOfDischarge(String testData) {
		try {
			txtPortOfDischarge.sendKeys(testData);
			autoCompleteDiv.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickIsSplit(String testData) {
		try {
			WebElement checkbox = chkIsSplitHouseBill;
			if (!checkbox.isSelected()) {
				checkbox.click();
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickComplete_btn(String testData) {
		try {

			btnComplete.click();
			btnBack.click();
			OR.driver.switchTo().defaultContent();
			OR.driver.switchTo().frame("contentframe");
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	// --------FAL 3
	public static void clickCreate_FAL3(String testData) {
		try {
			linkRepository.click();
			lnkFAL3.click();
			OR.driver.switchTo().frame(frame_FAL3);
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setPeriodofStay(String testData) {
		try {
			txtPeriodofStay.sendKeys(testData);
			btnCreate.click();

		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickNillStores(String testData) {
		try {
			WebElement checkbox = ChkNillStores;
			if (!checkbox.isSelected()) {
				checkbox.click();
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickNew_ShipStore(String testData) {
		try {
			btnENew.click();

		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setNameArticle(String testData) {
		try {
			txtNameArticle.sendKeys(testData);
			autoCompleteDiv.click();
			if ("OTHERS".equals(testData)) {
				txtNAOthers.sendKeys(testData);
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setLocationOnBoard(String testData) {
		try {
			txtLocBoard.sendKeys(testData);
			autoCompleteDiv.click();
			if ("OTHERS".equals(testData)) {
				txtLBOthers.sendKeys(testData);
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setQuantity(String testData) {
		try {
			txtQuantity.sendKeys(testData);

		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setGrossWeightUOM(String testData) {
		try {
			ddlGrossWeightUOM.sendKeys(testData);
			autoCompleteDiv.click();

		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	// --------FAL 4
	public static void clickCreate_FAL4(String testData) {
		try {
			linkRepository.click();
			lnkFAL4.click();
			OR.driver.switchTo().frame(frame_FAL4);
			btnCreate.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickNillEffects(String testData) {
		try {
			WebElement checkbox = ChkNilEffects;
			if (!checkbox.isSelected()) {
				checkbox.click();
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickNewCrewsEffects(String testData) {
		try {
			JavascriptExecutor jse = (JavascriptExecutor) OR.driver;
			jse.executeScript("window.scrollBy(0,1000)");
			btnNewCrew.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setFamilyName(String testData) {
		try {
			OR.driver.switchTo().frame(frame_FAL4CrewEffects);
			txtFamilyName.sendKeys(testData);

		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setRankorRating(String testData) {
		try {

			txtRankorRating.sendKeys(testData);

		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void setGoodsDescription(String testData) {
		try {

			txtGoodsDescription.sendKeys(testData);
			autoCompleteDiv.click();
			if ("OTHERS".equals(testData)) {
				txtothdoc.sendKeys(testData);
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	public static void clickClose_btn(String testData) {
		try {

			btnClose.click();
			OR.driver.switchTo().parentFrame();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}

	//-----------FAL 5
	public static void clickCreate_FAL5(String testData) {
		try {
			linkRepository.click();
			lnkFAL5.click();
			OR.driver.switchTo().frame(frame_FAL5);
			btnCreate.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void clickAddCrew(String testData) {
		try {
			btnAdd.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setGivenName(String testData) {
		try {
			txtFmlyName.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setRank(String testData) {
		try {
			txtRank.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setCountry(String testData) {
		try {
			txtCountry.sendKeys(testData);
			autoCompleteDiv.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void selectTravelDoc(String testData) {
		try {
			Select select =new Select(ddlTravelDocument);
			select.selectByVisibleText(testData);
			
			if ("Others".equals(testData)) {
				txtothdoc.sendKeys(testData);
			}else if ("Passport/ID".equals(testData)) {
				txtCountrypt.sendKeys("Singapore");
				autoCompleteDiv.click();
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setDocNo(String testData) {
		try {
			txtDocNo.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void selectDate(String testData) {
		try {
			Select year = new Select(year_datepicker);
			year.selectByVisibleText(testData);
			Select month = new Select(month_datepicker);
			month.selectByVisibleText("January");
			select_date.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setDOBDate(String testData) {
		try {
			txtDOBDatePicker.click();
			selectDate(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setBirthPlace(String testData) {
		try {
			txtBirthPlace.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setDocIssueDate(String testData) {
		try {
			txtIssueDateDatePicker.click();
			selectDate(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setDocExpiryDate(String testData) {
		try {
			txtExpiryDateDatePicker.click();
			selectDate(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setSeamanBookNo(String testData) {
		try {
			txtBookNo.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setValidDate(String testData) {
		try {
			txtValidDateDatePicker.click();
			selectDate(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	
	//----------------FAL 6
	public static void clickCreate_FAL6(String testData) {
		try {
			linkRepository.click();
			lnkFAL6.click();
			OR.driver.switchTo().frame(frame_FAL6);
			btnCreate.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void clickNilPassengers(String testData) {
		try {
			chkNilPassengers.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void clickNewPassenger(String testData) {
		try {
			btnNew.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setFamilyName_GivenName(String testData) {
		try {
			txtFamilyName.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setNationality(String testData) {
		try {
			txtNationality.sendKeys(testData);
			autoCompleteDiv.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setPlaceOfBirth(String testData) {
		try {
			txtPOB.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void selectTravelDT(String testData) {
		try {
			Select select =new Select(txtTDT);
			select.selectByVisibleText(testData);
			if ("Others".equals(testData)) {
				txtothdoc.sendKeys(testData);
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setDocumentNo(String testData) {
		try {
			txtDocumentNo.sendKeys(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setDocumentIssueDate(String testData) {
		try {
			txtDIDDatePicker.click();
			selectDate(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setDocumentExpiryDate(String testData) {
		try {
			txtDEDDatePicker.click();
			selectDate(testData);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void clickTransitPassenger(String testData) {
		try {
			WebElement checkbox = rboTransitPassYes;
			if (!checkbox.isSelected()) {
				checkbox.click();
			}else {
				rboTransitPassNo.click();
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setPortOfEmbarkation(String testData) {
		try {
			txtPOE.sendKeys(testData);
			autoCompleteDiv.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	public static void setPortOfDisembarkation(String testData) {
		try {
			txtPOD.sendKeys(testData);
			autoCompleteDiv.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
	
	
	// ----------------Submit FAL1
	public static void clickSubmit_btn(String testData) {
		try {
			btnSubmit.click();
			btnBack.click();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			Driver_Class.testResult = false;
		}
	}
}
